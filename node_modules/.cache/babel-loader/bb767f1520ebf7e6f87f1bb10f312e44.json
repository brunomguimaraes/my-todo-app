{"ast":null,"code":"import _objectSpread from \"/Users/milano/Documents/Projects/todo-xablaus/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/milano/Documents/Projects/todo-xablaus/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/milano/Documents/Projects/todo-xablaus/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const emptyTodo = {\n    title: \"\",\n    description: \"\"\n  };\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        todos = _React$useState2[0],\n        setTodos = _React$useState2[1];\n\n  const _React$useState3 = React.useState(emptyTodo),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        newTodo = _React$useState4[0],\n        setNewTodo = _React$useState4[1];\n\n  const getAllTodos = () => fetch(\"http://localhost:3000/todos\").then(function (response) {\n    return response.json();\n  }).then(function (myJson) {\n    setTodos(myJson);\n  });\n\n  function fakeIdGenerator() {\n    return Math.round(Math.random() * 1000000000);\n  }\n\n  const addEntry = todo => {\n    setTodos(todos.concat(_objectSpread({}, todo, {\n      id: fakeIdGenerator()\n    })));\n    setNewTodo(emptyTodo);\n  };\n\n  const createOnNewTodoChange = field => {\n    return e => {\n      setNewTodo(_objectSpread({}, newTodo, {\n        [field]: e.target.value\n      }));\n    };\n  };\n\n  const deleteEntry = todoIndex => {\n    const remainingTodos = todos.filter(({\n      id\n    }) => id !== todoIndex);\n    setTodos(remainingTodos);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/milano/Documents/Projects/todo-xablaus/src/App.js"],"names":["React","App","emptyTodo","title","description","useState","todos","setTodos","newTodo","setNewTodo","getAllTodos","fetch","then","response","json","myJson","fakeIdGenerator","Math","round","random","addEntry","todo","concat","id","createOnNewTodoChange","field","e","target","value","deleteEntry","todoIndex","remainingTodos","filter"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAGA,SAASC,GAAT,GAAe;AAEX,QAAMC,SAAS,GAAG;AACdC,IAAAA,KAAK,EAAE,EADO;AAEdC,IAAAA,WAAW,EAAE;AAFC,GAAlB;;AAFW,0BAOeJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAPf;AAAA;AAAA,QAOJC,KAPI;AAAA,QAOGC,QAPH;;AAAA,2BAQmBP,KAAK,CAACK,QAAN,CAAeH,SAAf,CARnB;AAAA;AAAA,QAQJM,OARI;AAAA,QAQKC,UARL;;AAUX,QAAMC,WAAW,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAL,CACzBC,IADyB,CACpB,UAASC,QAAT,EAAmB;AACrB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAHyB,EAIzBF,IAJyB,CAIpB,UAASG,MAAT,EAAiB;AACnBR,IAAAA,QAAQ,CAACQ,MAAD,CAAR;AACH,GANyB,CAA1B;;AAQA,WAASC,eAAT,GAA2B;AACvB,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,UAA3B,CAAP;AACH;;AACD,QAAMC,QAAQ,GAAIC,IAAD,IAAU;AACvBd,IAAAA,QAAQ,CACJD,KAAK,CAACgB,MAAN,mBACOD,IADP;AAEIE,MAAAA,EAAE,EAAEP,eAAe;AAFvB,OADI,CAAR;AAOIP,IAAAA,UAAU,CAACP,SAAD,CAAV;AACH,GATL;;AAWI,QAAMsB,qBAAqB,GAAIC,KAAD,IAAW;AACrC,WAAQC,CAAD,IAAO;AACVjB,MAAAA,UAAU,mBACHD,OADG;AAEN,SAACiB,KAAD,GAASC,CAAC,CAACC,MAAF,CAASC;AAFZ,SAAV;AAIH,KALD;AAMH,GAPD;;AASA,QAAMC,WAAW,GAAIC,SAAD,IAAe;AAC/B,UAAMC,cAAc,GAAGzB,KAAK,CAAC0B,MAAN,CAAa,CAAC;AAAET,MAAAA;AAAF,KAAD,KAAYA,EAAE,KAAKO,SAAhC,CAAvB;AACAvB,IAAAA,QAAQ,CAACwB,cAAD,CAAR;AACH,GAHD;;AAKJ,SACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AA0BH;;AAED,eAAe9B,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n\nfunction App() {\n    \n    const emptyTodo = {\n        title: \"\",\n        description: \"\"\n    };\n    \n    const [todos, setTodos] = React.useState([]);\n    const [newTodo, setNewTodo] = React.useState(emptyTodo);\n    \n    const getAllTodos = () => fetch(\"http://localhost:3000/todos\")\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(myJson) {\n        setTodos(myJson)\n    });\n    \n    function fakeIdGenerator() {\n        return Math.round(Math.random() * 1000000000);\n    }\n    const addEntry = (todo) => {\n        setTodos(\n            todos.concat({\n                ...todo,\n                id: fakeIdGenerator()\n            })\n            );\n            \n            setNewTodo(emptyTodo);\n        };\n        \n        const createOnNewTodoChange = (field) => {\n            return (e) => {\n                setNewTodo({\n                    ...newTodo,\n                    [field]: e.target.value\n                });\n            };\n        };\n        \n        const deleteEntry = (todoIndex) => {\n            const remainingTodos = todos.filter(({ id }) => id !== todoIndex);\n            setTodos(remainingTodos);\n        };\n\n    return (\n        <div className=\"App\">\n            {/* <header className=\"App-header\" />\n            <ul>\n                {todos && todos.map((todo) => (\n                    <li key={todo.id}>\n                        {todo.title} / {todo.description}\n                        <button onClick={() => deleteEntry(todo.id)}>\n                            del\n                        </button>\n                    </li>\n                ))}\n            </ul>\n            <div>\n                <input\n                    value={newTodo.title}\n                    onChange={createOnNewTodoChange(\"title\")}\n                />\n                <input\n                    value={newTodo.description}\n                    onChange={createOnNewTodoChange(\"description\")}\n                />\n                <button onClick={() => addEntry(newTodo)}>add</button>\n            </div> */}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
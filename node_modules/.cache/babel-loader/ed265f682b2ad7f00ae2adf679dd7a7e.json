{"ast":null,"code":"import _objectSpread from \"/Users/milano/Documents/Projects/todo-xablaus/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/milano/Documents/Projects/todo-xablaus/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/milano/Documents/Projects/todo-xablaus/src/components/App/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nfunction App() {\n  const emptyTodo = {\n    title: \"\",\n    description: \"\"\n  };\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        todos = _useState2[0],\n        setTodos = _useState2[1];\n\n  const _useState3 = useState(emptyTodo),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newTodo = _useState4[0],\n        setNewTodo = _useState4[1];\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/todos\").then(response => response.json()).then(todos => setTodos(todos));\n  }, [newTodo]);\n\n  const createTodo = todo => {\n    setNewTodo(todo);\n    addEntry(newTodo);\n    setNewTodo(emptyTodo);\n  };\n\n  const addEntry = todo => {\n    fetch(\"http://localhost:3000/todos\", {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, cors, *same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\",\n      // include, *same-origin, omit\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      redirect: \"follow\",\n      // manual, *follow, error\n      referrer: \"no-referrer\",\n      // no-referrer, *client\n      body: JSON.stringify(todo) // body data type must match \"Content-Type\" header\n\n    }).then(response => response.json());\n    setNewTodo(emptyTodo);\n  };\n\n  const deleteEntry = todoId => {\n    fetch(\"http://localhost:3000/todos/\" + todoId, {\n      method: \"DELETE\"\n    }).then(response => response.json());\n  };\n\n  const createOnNewTodoChange = field => {\n    return e => {\n      setNewTodo(_objectSpread({}, newTodo, {\n        [field]: e.target.value\n      }));\n    };\n  };\n\n  const deleteTodo = todoIndex => {\n    deleteEntry(todoIndex);\n    const remainingTodos = todos.filter(({\n      id\n    }) => id !== todoIndex);\n    setTodos(remainingTodos);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, todos && todos.map(todo => React.createElement(\"li\", {\n    key: todo.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, todo.title, \" / \", todo.description, React.createElement(\"button\", {\n    onClick: () => deleteTodo(todo.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"del\")))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newTodo.title,\n    onChange: createOnNewTodoChange(\"title\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    value: newTodo.description,\n    onChange: createOnNewTodoChange(\"description\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => createTodo(newTodo),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"add\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/milano/Documents/Projects/todo-xablaus/src/components/App/index.js"],"names":["React","useState","useEffect","App","emptyTodo","title","description","todos","setTodos","newTodo","setNewTodo","fetch","then","response","json","createTodo","todo","addEntry","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","deleteEntry","todoId","createOnNewTodoChange","field","e","target","value","deleteTodo","todoIndex","remainingTodos","filter","id","map"],"mappings":"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","sourcesContent":["import React, {\n    useState,\n    useEffect\n  } from \"react\";\n  \n  import \"./styles.css\";\n  \n  function App() {\n    const emptyTodo = {\n      title: \"\",\n      description: \"\"\n    };\n  \n    const [todos, setTodos] = useState([]);\n    const [newTodo, setNewTodo] = useState(emptyTodo);\n  \n    useEffect(() => {\n      fetch(\"http://localhost:3000/todos\")\n        .then(response =>  response.json())\n        .then(todos => setTodos(todos));\n  \n    }, [newTodo]);\n  \n    const createTodo = (todo) => {\n      setNewTodo(todo);\n      addEntry(newTodo);\n      setNewTodo(emptyTodo);\n    };\n  \n    const addEntry = (todo) => {\n      fetch(\"http://localhost:3000/todos\", {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n          \"Content-Type\": \"application/json\"\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(todo) // body data type must match \"Content-Type\" header\n      }).then((response) => response.json());\n  \n      setNewTodo(emptyTodo);\n    };\n  \n    const deleteEntry = (todoId) => {\n      fetch(\"http://localhost:3000/todos/\" + todoId, { method: \"DELETE\" })\n        .then((response) => response.json());\n    };\n  \n    const createOnNewTodoChange = (field) => {\n      return (e) => {\n        setNewTodo({\n          ...newTodo,\n          [field]: e.target.value\n        });\n      };\n    };\n  \n    const deleteTodo = (todoIndex) => {\n      deleteEntry(todoIndex);\n      const remainingTodos = todos.filter(({ id }) => id !== todoIndex);\n      setTodos(remainingTodos);\n    };\n  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" />\n        <ul>\n          {todos && todos.map((todo) => (\n            <li key={todo.id}>\n              {todo.title} / {todo.description}\n              <button onClick={() => deleteTodo(todo.id)}>\n                del\n              </button>\n            </li>\n          ))}\n        </ul>\n        <div>\n          <input\n            value={newTodo.title}\n            onChange={createOnNewTodoChange(\"title\")}\n          />\n          <input\n            value={newTodo.description}\n            onChange={createOnNewTodoChange(\"description\")}\n          />\n          <button onClick={() => createTodo(newTodo)}>add</button>\n        </div>\n      </div>\n    );\n  }\n  \n  export default App;"]},"metadata":{},"sourceType":"module"}